// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
 directUrl = env("DB_URL_NON_POOLING") // uses a direct connection
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  email     String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id                     String                  @id @unique @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          Boolean?                @default(false)
  picture                String?
  githubId               Int?                    @unique
  sessions               Session[]
  projects               Project[]
  emailVerificationCodes EmailVerificationCode[]
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String           @id @default(uuid())
  name        String
  domain      String
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  shareUrl    String?          @unique
  socialLinks SocialLink[]     // Relação com os links sociais
  customizations Customization[] // Relação com as customizações
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Customization {
  id        String  @id @default(uuid())
  key       String  // Nome da customização (ex.: "background", "accessory", etc.)
  value     String  // Valor da customização (ex.: URL da imagem ou JSON com detalhes)
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Adiciona uma chave única composta para garantir unicidade por projeto e chave
  @@unique([projectId, key])
}


model SocialLink {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  name      String?  // Agora é opcional
  url       String
  createdAt DateTime @default(now())
}

model Waitlist {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  notified  Boolean  @default(false) // Para indicar se o usuário já foi notificado
}